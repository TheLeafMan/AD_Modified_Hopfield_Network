import numpy as np
import matplotlib.pyplot as plt
from jason_HN import hopfield

yin_yang_pattern = [[ 1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,],
 [ 1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,],
 [ 1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1, -1,  1,],
 [ 1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1, -1,  1,],
 [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1,],
 [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1,],
 [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1,],
 [-1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1, -1,],
 [-1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,],
 [-1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,],
 [ 1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1, -1,  1,],
 [ 1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1,  1,  1, -1, -1,  1,],
 [ 1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1]]
checkerboard_pattern = [[-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1]]


checkerboard_pattern_messed_up = [[1, 1,  1,  1, -1, -1,  1,  1, -1, -1,  -1,  1, -1, -1,  1,  1,],
 [-1, 1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, 1,  -1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  -1, -1, -1,  1,  -1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  -1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, 1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  -1,  1, -1, -1,],
 [-1, -1,  1,  -1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, 1,  1,  1, -1, -1,  1,  1, 1, -1,  1,  1,],
 [ -1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  -1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1]]

skeppy_pattern = [[ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [-1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,],
 [-1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,],
 [ 1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]]
skeppy_pattern = np.array(skeppy_pattern).flatten()
yin_yang_pattern = np.array(yin_yang_pattern).flatten()
checkerboard_pattern = np.array(checkerboard_pattern).flatten()
checkerboard_pattern_messed_up = np.array(checkerboard_pattern_messed_up).flatten()

myhopfield = hopfield(256)     #Create network with N number of nodes
for y in range (3):             #Create number of patterns
    myhopfield.create_pattern()
# myhopfield.create_pattern(yin_yang_pattern)
# myhopfield.create_pattern(checkerboard_pattern)
# myhopfield.create_pattern(skeppy_pattern)

myhopfield.set_initial_state()

# for i in range(4):
#     killed_neuron = np.random.randint(0, high = 24)
#     print(killed_neuron)
#     myhopfield.kill_neuron(killed_neuron)
    
for i in range(30):
    myhopfield.update_all_nodes()

myhopfield.visualize_patterns(myhopfield.original_state)