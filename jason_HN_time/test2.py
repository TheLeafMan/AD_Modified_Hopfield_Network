from jason_HN_time import hopfield
import numpy as np

pattern1 = [[-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1]]
pattern2 = [[ 1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,],
 [-1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1,  1,],
 [ 1,  1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1, -1, -1,],
 [-1, -1, -1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1, -1,  1, -1,  1, -1,  1, -1, -1, -1, -1, -1,],
 [-1, -1, -1, -1, -1, -1,  1, -1,  1, -1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1, -1,  1, -1, -1, -1, -1, -1, -1, -1,],
 [-1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,],
 [-1, -1, -1, -1, -1, -1, -1,  1, -1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1, -1,  1, -1,  1, -1, -1, -1, -1, -1, -1,],
 [-1, -1, -1, -1, -1,  1, -1,  1, -1,  1, -1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1, -1, -1, -1,],
 [-1, -1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1,  1,  1,],
 [ 1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1, -1,],
 [-1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1]]
pattern3 = [[-1, -1, -1,  1,  1, -1,  1,  1, -1, -1,  1,  1,  1,  1, -1, -1,],
 [-1, -1, -1, -1,  1,  1, -1, -1,  1,  1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1,  1, -1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1,  1,  1,],
 [-1, -1, -1, -1,  1,  1, -1,  1, -1, -1,  1,  1,  1,  1, -1, -1,],
 [-1, -1, -1, -1, -1,  1,  1, -1,  1,  1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1,  1,  1, -1,  1,  1, -1,  1,  1, -1, -1,  1,  1,  1,  1,],
 [-1, -1, -1, -1, -1,  1,  1, -1,  1, -1,  1,  1,  1,  1, -1, -1,],
 [-1, -1, -1, -1, -1, -1,  1,  1, -1,  1,  1,  1, -1, -1, -1,  1,],
 [ 1,  1, -1, -1,  1, -1,  1,  1, -1,  1, -1, -1,  1,  1, -1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1, -1,  1,  1, -1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1,  1, -1,  1,  1, -1,],
 [-1, -1,  1,  1, -1, -1, -1,  1,  1, -1,  1,  1, -1,  1,  1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1,  1, -1,  1,  1, -1,],
 [-1, -1, -1, -1, -1, -1, -1, -1,  1,  1, -1,  1,  1, -1,  1,  1,],
 [ 1, -1,  1, -1,  1, -1,  1, -1,  1,  1, -1,  1,  1, -1,  1,  1,],
 [-1,  1, -1,  1, -1,  1, -1, -1,  1,  1, -1,  1,  1, -1,  1,  1]]

pattern1 = np.array(pattern1).flatten()
pattern2 = np.array(pattern2).flatten()
pattern3 = np.array(pattern3).flatten()


myhopfield = hopfield(256)    #Create network with N number of nodes
# for y in range (3):             #Create number of patterns
#     myhopfield.create_pattern()

myhopfield.create_pattern(pattern1)
myhopfield.create_pattern(pattern2)
myhopfield.create_pattern(pattern3)
myhopfield.set_initial_state()
myhopfield.tau_process()
myhopfield.combined_visualization(years_displayed = [1, 8, 10, 12, 14, 16])

# for i in range(1):
#     myhopfield.update_all_nodes()

# for i in range(1, 100, 10):
#     myhopfield.create_display(myhopfield.dou_factor[i], i)
#     print(myhopfield.affect_weight(i))
#     print("\n\n")
# for i in range(1,158,10):
#     myhopfield.create_display(myhopfield.dou_factor[i], i)

# myhopfield.visualize_patterns(myhopfield.original_state)