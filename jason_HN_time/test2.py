from jason_HN_time import hopfield
import numpy as np

yin_yang_pattern = [[ 1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,],
 [ 1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,],
 [ 1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1, -1,  1,],
 [ 1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1, -1,  1,],
 [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1,],
 [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1,],
 [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1,],
 [-1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1, -1,],
 [-1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,],
 [-1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,],
 [ 1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1, -1,  1,],
 [ 1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1,  1,  1, -1, -1,  1,],
 [ 1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1]]
checkerboard_pattern = [[-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1]]


checkerboard_pattern_messed_up = [[1, 1,  1,  1, -1, -1,  1,  1, -1, -1,  -1,  1, -1, -1,  1,  1,],
 [-1, 1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, 1,  -1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  -1, -1, -1,  1,  -1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [-1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  -1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, 1, -1,  1,  1, -1, -1,],
 [ 1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  -1,  1, -1, -1,],
 [-1, -1,  1,  -1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,],
 [-1, -1,  1,  1, -1, 1,  1,  1, -1, -1,  1,  1, 1, -1,  1,  1,],
 [ -1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,],
 [ 1,  -1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1]]

skeppy_pattern = [[ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [-1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,],
 [-1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,],
 [ 1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,],
 [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]]
skeppy_pattern = np.array(skeppy_pattern).flatten()
yin_yang_pattern = np.array(yin_yang_pattern).flatten()
checkerboard_pattern = np.array(checkerboard_pattern).flatten()
checkerboard_pattern_messed_up = np.array(checkerboard_pattern_messed_up).flatten()


myhopfield = hopfield(256)    #Create network with N number of nodes
for y in range (3):             #Create number of patterns
    myhopfield.create_pattern()

# myhopfield.create_pattern(yin_yang_pattern)
# myhopfield.create_pattern(checkerboard_pattern)
# myhopfield.create_pattern(skeppy_pattern)
myhopfield.set_initial_state()
myhopfield.tau_process()
myhopfield.combined_visualization(num_time_steps=4)

# for i in range(1):
#     myhopfield.update_all_nodes()

# for i in range(1, 100, 10):
#     myhopfield.create_display(myhopfield.dou_factor[i], i)
#     print(myhopfield.affect_weight(i))
#     print("\n\n")
# for i in range(1,158,10):
#     myhopfield.create_display(myhopfield.dou_factor[i], i)

# myhopfield.visualize_patterns(myhopfield.original_state)